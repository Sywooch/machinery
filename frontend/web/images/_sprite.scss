// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$ic-domik-name: 'ic-domik';
$ic-domik-x: 0px;
$ic-domik-y: 23px;
$ic-domik-offset-x: 0px;
$ic-domik-offset-y: -23px;
$ic-domik-width: 17px;
$ic-domik-height: 15px;
$ic-domik-total-width: 66px;
$ic-domik-total-height: 38px;
$ic-domik-image: '../images/sprite.png';
$ic-domik: (0px, 23px, 0px, -23px, 17px, 15px, 66px, 38px, '../images/sprite.png', 'ic-domik', );
$ic-inst-name: 'ic-inst';
$ic-inst-x: 0px;
$ic-inst-y: 0px;
$ic-inst-offset-x: 0px;
$ic-inst-offset-y: 0px;
$ic-inst-width: 22px;
$ic-inst-height: 23px;
$ic-inst-total-width: 66px;
$ic-inst-total-height: 38px;
$ic-inst-image: '../images/sprite.png';
$ic-inst: (0px, 0px, 0px, 0px, 22px, 23px, 66px, 38px, '../images/sprite.png', 'ic-inst', );
$ic-remove-name: 'ic-remove';
$ic-remove-x: 17px;
$ic-remove-y: 23px;
$ic-remove-offset-x: -17px;
$ic-remove-offset-y: -23px;
$ic-remove-width: 14px;
$ic-remove-height: 14px;
$ic-remove-total-width: 66px;
$ic-remove-total-height: 38px;
$ic-remove-image: '../images/sprite.png';
$ic-remove: (17px, 23px, -17px, -23px, 14px, 14px, 66px, 38px, '../images/sprite.png', 'ic-remove', );
$ic-twit-name: 'ic-twit';
$ic-twit-x: 22px;
$ic-twit-y: 0px;
$ic-twit-offset-x: -22px;
$ic-twit-offset-y: 0px;
$ic-twit-width: 22px;
$ic-twit-height: 23px;
$ic-twit-total-width: 66px;
$ic-twit-total-height: 38px;
$ic-twit-image: '../images/sprite.png';
$ic-twit: (22px, 0px, -22px, 0px, 22px, 23px, 66px, 38px, '../images/sprite.png', 'ic-twit', );
$ic-uncheck-name: 'ic-uncheck';
$ic-uncheck-x: 31px;
$ic-uncheck-y: 23px;
$ic-uncheck-offset-x: -31px;
$ic-uncheck-offset-y: -23px;
$ic-uncheck-width: 14px;
$ic-uncheck-height: 14px;
$ic-uncheck-total-width: 66px;
$ic-uncheck-total-height: 38px;
$ic-uncheck-image: '../images/sprite.png';
$ic-uncheck: (31px, 23px, -31px, -23px, 14px, 14px, 66px, 38px, '../images/sprite.png', 'ic-uncheck', );
$ic-vk-name: 'ic-vk';
$ic-vk-x: 44px;
$ic-vk-y: 0px;
$ic-vk-offset-x: -44px;
$ic-vk-offset-y: 0px;
$ic-vk-width: 22px;
$ic-vk-height: 23px;
$ic-vk-total-width: 66px;
$ic-vk-total-height: 38px;
$ic-vk-image: '../images/sprite.png';
$ic-vk: (44px, 0px, -44px, 0px, 22px, 23px, 66px, 38px, '../images/sprite.png', 'ic-vk', );
$spritesheet-width: 66px;
$spritesheet-height: 38px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($ic-domik, $ic-inst, $ic-remove, $ic-twit, $ic-uncheck, $ic-vk, );
$spritesheet: (66px, 38px, '../images/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
