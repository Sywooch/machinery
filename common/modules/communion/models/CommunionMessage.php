<?php

namespace common\modules\communion\models;

use Yii;
use common\modules\notice\models\Notice;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;

use common\models\User;

/**
 * This is the model class for table "communion_message".
 *
 * @property integer $id
 * @property integer $communion_id
 * @property boolean $status
 * @property string $create_at
 * @property string $ready
 * @property integer $user_id
 * @property string $body
 */
class CommunionMessage extends \yii\db\ActiveRecord
{
    const ST_NEW = 1;
    const ST_READ = 2;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'communion_message';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['communion_id', 'user_id'], 'integer'],
            [['status'], 'boolean'],
            [['create_at', 'ready'], 'safe'],
            [['body', 'contacts'], 'string'],
            [['body'], 'required'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'communion_id' => Yii::t('app', 'Communion ID'),
            'status' => Yii::t('app', 'Status'),
            'create_at' => Yii::t('app', 'Create At'),
            'ready' => Yii::t('app', 'Ready'),
            'user_id' => Yii::t('app', 'User ID'),
            'body' => Yii::t('app', 'Message'),
            'contacts' => Yii::t('app', 'Contacts for feedback'),
        ];
    }

    /**
     * @inheritdoc
     * @return CommunionMessageQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new CommunionMessageQuery(get_called_class());
    }

    public function getComunion(){
        return $this->hasOne(Communion::className(), ['id' => 'communion_id']);
    }

    public function getUser(){
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    public static function findNewMessage(){
        $q = CommunionMessage::find()
            ->where(['status'=>CommunionMessage::ST_NEW])
            ->andWhere(['or', 'user_id<>'.Yii::$app->user->id, 'user_id is NULL'])
            ->with(['comunion'=>function($q){
                $q->where(['user_to'=>Yii::$app->user->id]);
            }])
            ->asArray()
            ->all();
        return $q;
    }

    public function beforeSave($insert)
    {
        #code
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
//        dd($this->getComunion(), 1);
        $notice = new Notice();

        $notice->create_at = time();
        $notice->subject = Yii::t('app', 'A new message');
        $notice->body = Yii::t('app', 'You have received a new message. <a href="{url}">Look</a>', ['url'=>Url::to(['/profile/im', 'id'=>$this->communion_id], true)]);
        $notice->type = 'info';
        $notice->user_id = Communion::findOne($this->communion_id)->user_to;
        $notice->save();
    }
}
