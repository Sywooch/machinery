<?php
namespace common\models;

use common\modules\file\models\File;
use yii\helpers\StringHelper;
use yii\db\Expression;

class User extends \dektrium\user\models\User{

    const DEFAULT_PACKAGE = 1;
     /**
     * @inheritdoc
     */
    public function rules()
    {
        $rules = parent::rules();
        $rules[] = [['photo'], 'file', 'extensions' => 'jpg, png', 'mimeTypes' => 'image/jpeg, image/png', 'maxFiles' => 2];
        return $rules;
    }
    
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors[] = \common\modules\file\components\FileBehavior::class;
//        $behaviors[] = \common\models\UserBehavior::class;
        return $behaviors;
    }

    public function getAvatar(){
        return $this->hasOne(File::class,['entity_id' => 'id'])->where([
            'model' => StringHelper::basename(self::class)
        ]);
    }
    public function getOrderActive(){
        return $this->hasMany(OrderPackage::className(), ['user_id'=>'id'])->where(['status'=>1]);
    }
    public function getPackageActive(){
        return $this->hasMany(
            UserPackage::className(), ['user_id'=>'id'])
            ->where(['>', 'deadline', new Expression('NOW()')])
            ->indexBy('package_id');
    }
    public function getRolesByUser($userId){

    }

    public function beforeSave($insert)
    {

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);
        if ($insert) {
            // регистрация - добавляем юзеру бесплатный начальный пакет
            $pack = TarifPackages::findOne(self::DEFAULT_PACKAGE);
            $order = \common\models\UserRepositories::saveNewOrder($this->id, self::DEFAULT_PACKAGE);
            \common\models\UserRepositories::saveActiveOrder($this->id, $pack, $order);
        }

    }


    
}

